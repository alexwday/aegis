"""
Generate complete system and user prompts using ACTUAL code execution.

This script runs the actual agent functions to show what prompts
would be sent to the LLM, using real database data.
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# Set up environment
import os
os.environ.setdefault("LOG_LEVEL", "WARNING")  # Reduce noise

from aegis.utils.logging import setup_logging
from aegis.utils.prompt_loader import load_yaml, load_global_prompts_for_agent
from aegis.model.agents.clarifier import load_banks_from_db, get_period_availability_from_db, create_bank_prompt
from aegis.model.agents.planner import get_filtered_availability_table


setup_logging()


def format_section(title, content, char="="):
    """Format a section with borders."""
    border = char * 80
    return f"\n{border}\n{title}\n{border}\n\n{content}\n"


async def main():
    """Generate example prompts for all agents using real code."""

    # Example query
    example_query = "What was RBC's Q3 2024 revenue?"

    # Available databases for filtering
    available_databases = ["benchmarking", "reports", "rts", "transcripts"]

    output = []
    output.append("# Aegis Agent Prompts - Real Code Generated Examples\n")
    output.append(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    output.append(f"**Example Query**: \"{example_query}\"\n")
    output.append("**Note**: Uses ACTUAL code execution with real database data\n")
    output.append("\n---\n")

    # ========================================================================
    # ROUTER AGENT
    # ========================================================================
    output.append("\n## 1. Router Agent\n")
    output.append("**Purpose**: Binary routing decision (direct_response vs research_workflow)\n")

    router_data = load_yaml("aegis/router.yaml")
    uses_global = router_data.get("uses_global", [])
    globals_prompt = load_global_prompts_for_agent(uses_global, available_databases)

    system_prompt_template = router_data.get("system_prompt", "")
    available_dbs_str = ', '.join(available_databases)
    agent_system_prompt = system_prompt_template.format(available_databases=available_dbs_str)

    prompt_parts = []
    if globals_prompt:
        prompt_parts.append(globals_prompt)
    prompt_parts.append(agent_system_prompt)
    router_system_prompt = "\n\n---\n\n".join(prompt_parts)

    user_prompt_template = router_data.get("user_prompt_template", "")
    conversation_history = "user: What was RBC's Q3 2024 revenue?"
    router_user_prompt = user_prompt_template.format(
        conversation_history=conversation_history,
        current_query=example_query
    )

    output.append(format_section("### System Prompt", router_system_prompt))
    output.append(format_section("### User Prompt", router_user_prompt))

    # ========================================================================
    # CLARIFIER AGENT - BANKS (REAL DATA)
    # ========================================================================
    output.append("\n## 2. Clarifier Agent - Bank Extraction\n")
    output.append("**Purpose**: Identify banks and create comprehensive query intent\n")
    output.append("**Note**: Bank index generated by `load_banks_from_db()` function\n")

    clarifier_banks_data = load_yaml("aegis/clarifier_banks.yaml")
    uses_global = clarifier_banks_data.get("uses_global", [])
    globals_prompt = load_global_prompts_for_agent(uses_global, available_databases)

    # Get REAL bank index from database
    try:
        bank_data = await load_banks_from_db(available_databases)
        bank_prompt = create_bank_prompt(bank_data, available_databases)
    except Exception as e:
        bank_prompt = f"[ERROR loading banks from database: {e}]"

    agent_system_prompt = clarifier_banks_data.get("system_prompt", "")

    prompt_parts = []
    if globals_prompt:
        prompt_parts.append(globals_prompt)
    prompt_parts.append(agent_system_prompt.strip())
    prompt_parts.append(bank_prompt)  # Dynamic data at END

    clarifier_banks_system_prompt = "\n\n".join(prompt_parts)

    user_prompt_template = clarifier_banks_data.get("user_prompt_template", "")
    clarifier_banks_user_prompt = user_prompt_template.format(query=example_query)

    output.append(format_section("### System Prompt", clarifier_banks_system_prompt))
    output.append(format_section("### User Prompt", clarifier_banks_user_prompt))

    # ========================================================================
    # CLARIFIER AGENT - PERIODS (REAL DATA)
    # ========================================================================
    output.append("\n## 3. Clarifier Agent - Period Extraction\n")
    output.append("**Purpose**: Extract and validate fiscal periods\n")
    output.append("**Note**: Period availability generated by `get_period_availability_from_db()` function\n")

    clarifier_periods_data = load_yaml("aegis/clarifier_periods.yaml")
    uses_global = clarifier_periods_data.get("uses_global", [])
    globals_prompt = load_global_prompts_for_agent(uses_global, available_databases)

    # Get REAL period availability from database
    # For this example, use RBC (bank_id=1)
    try:
        period_availability = await get_period_availability_from_db([1], available_databases)

        # Build the availability text as done in extract_periods
        availability_text = "\n<period_availability>\n"

        if period_availability.get("latest_reported"):
            availability_text += (
                f"Latest reported: {period_availability['latest_reported']['quarter']} "
            )
            availability_text += f"{period_availability['latest_reported']['fiscal_year']}\n\n"

        if period_availability.get("availability"):
            availability_text += "Available periods in the system:\n"
            availability_text += (
                "VALIDATION RULE: If a period exists in ANY database, it is AVAILABLE.\n\n"
            )
            availability_text += (
                "Bank | Name                         | Year | Quarter | Databases\n"
            )
            availability_text += (
                "-----|------------------------------|------|---------|----------\n"
            )

            for bank_id, bank_data in period_availability["availability"].items():
                bank_name = bank_data.get("name", "Unknown")
                bank_symbol = bank_data.get("symbol", "")
                display_name = f"{bank_name} ({bank_symbol})"

                # Reorganize data by year and quarter
                periods_by_yq = {}
                for db, years in bank_data["databases"].items():
                    for year, quarters in years.items():
                        for quarter in quarters:
                            key = (year, quarter)
                            if key not in periods_by_yq:
                                periods_by_yq[key] = []
                            periods_by_yq[key].append(db)

                # Output in clean table format
                for year, quarter in sorted(periods_by_yq.keys(), reverse=True):
                    databases = sorted(periods_by_yq[(year, quarter)])
                    availability_text += (
                        f" {bank_id:^3} | {display_name:<28} | {year:^4} | {quarter:^7} | "
                        f"{', '.join(databases)}\n"
                    )
        else:
            availability_text += "WARNING: No periods available for these banks.\n"

        availability_text += "</period_availability>\n"
    except Exception as e:
        availability_text = f"\n[ERROR loading period availability: {e}]\n"

    agent_system_prompt = clarifier_periods_data.get("system_prompt", "")

    prompt_parts = []
    if globals_prompt:
        prompt_parts.append(globals_prompt)
    prompt_parts.append(agent_system_prompt.strip())
    prompt_parts.append(availability_text)  # Dynamic data at END

    clarifier_periods_system_prompt = "\n\n".join(prompt_parts)

    user_prompt_template = clarifier_periods_data.get("user_prompt_template", "")
    clarifier_periods_user_prompt = user_prompt_template.format(query=example_query)

    output.append(format_section("### System Prompt", clarifier_periods_system_prompt))
    output.append(format_section("### User Prompt", clarifier_periods_user_prompt))

    # ========================================================================
    # PLANNER AGENT (REAL DATA)
    # ========================================================================
    output.append("\n## 4. Planner Agent\n")
    output.append("**Purpose**: Select databases to query based on intent\n")
    output.append("**Note**: Availability table generated by `get_filtered_availability_table()` function\n")

    planner_data = load_yaml("aegis/planner.yaml")
    uses_global = planner_data.get("uses_global", [])
    globals_prompt = load_global_prompts_for_agent(uses_global, available_databases)

    # Get REAL availability table from database
    # Simulating clarifier output: RBC Q3 2024
    try:
        period_info = {
            "apply_all": {
                "fiscal_year": 2024,
                "quarters": ["Q3"]
            }
        }
        availability_data = await get_filtered_availability_table(
            bank_ids=[1],
            periods=period_info,
            available_databases=available_databases
        )
        availability_table = availability_data.get("table", "")
    except Exception as e:
        availability_table = f"[ERROR loading availability table: {e}]"

    agent_system_prompt = planner_data.get("system_prompt", "")

    prompt_parts = []
    if globals_prompt:
        prompt_parts.append(globals_prompt)
    prompt_parts.append(agent_system_prompt.strip())
    prompt_parts.append(availability_table)  # Dynamic data at END

    planner_system_prompt = "\n\n".join(prompt_parts)

    user_prompt_template = planner_data.get("user_prompt_template", "")
    conversation_context = "user: What was RBC's Q3 2024 revenue?"
    query_intent = "Retrieve the total revenue for Royal Bank of Canada for Q3 2024"
    planner_user_prompt = user_prompt_template.format(
        conversation_context=conversation_context,
        query=example_query,
        query_intent=query_intent
    )

    output.append(format_section("### System Prompt", planner_system_prompt))
    output.append(format_section("### User Prompt", planner_user_prompt))

    # ========================================================================
    # RESPONSE AGENT
    # ========================================================================
    output.append("\n## 5. Response Agent\n")
    output.append("**Purpose**: Direct responses without database retrieval\n")

    response_data = load_yaml("aegis/response.yaml")
    uses_global = response_data.get("uses_global", [])
    globals_prompt = load_global_prompts_for_agent(uses_global, available_databases)

    agent_system_prompt = response_data.get("system_prompt", "")

    prompt_parts = []
    if globals_prompt:
        prompt_parts.append(globals_prompt)
    if agent_system_prompt:
        prompt_parts.append(agent_system_prompt.strip())
    response_system_prompt = "\n\n---\n\n".join(prompt_parts)

    user_prompt_template = response_data.get("user_prompt_template", "")
    greeting_query = "Hello! Can you explain what Aegis does?"
    response_user_prompt = user_prompt_template.format(latest_message=greeting_query)

    output.append("**Note**: Response agent handles greetings, definitions, and system questions.\n")
    output.append(f"**Example Query for Response Agent**: \"{greeting_query}\"\n")
    output.append(format_section("### System Prompt", response_system_prompt))
    output.append(format_section("### User Prompt", response_user_prompt))

    # ========================================================================
    # SUMMARIZER AGENT
    # ========================================================================
    output.append("\n## 6. Summarizer Agent\n")
    output.append("**Purpose**: Synthesize multiple database responses into concise summary\n")

    summarizer_data = load_yaml("aegis/summarizer.yaml")
    uses_global = summarizer_data.get("uses_global", [])
    globals_prompt = load_global_prompts_for_agent(uses_global, available_databases)

    agent_system_prompt = summarizer_data.get("system_prompt", "")

    prompt_parts = []
    if globals_prompt:
        prompt_parts.append(globals_prompt)
    if agent_system_prompt:
        prompt_parts.append(agent_system_prompt.strip())
    summarizer_system_prompt = "\n\n---\n\n".join(prompt_parts)

    # Example database responses (would come from subagents)
    database_responses_example = """
<database_response source="benchmarking">
Query Intent: Retrieve total revenue for RBC Q3 2024
Response: [Benchmarking data would appear here]
</database_response>

<database_response source="rts">
Query Intent: Retrieve total revenue for RBC Q3 2024
Response: [RTS filing data would appear here]
</database_response>
"""

    user_prompt_template = summarizer_data.get("user_prompt_template", "")
    summarizer_user_prompt = user_prompt_template.format(
        user_query=example_query,
        database_responses=database_responses_example
    )

    output.append(format_section("### System Prompt", summarizer_system_prompt))
    output.append(format_section("### User Prompt", summarizer_user_prompt))

    # ========================================================================
    # Write to file
    # ========================================================================
    output_file = Path(__file__).parent.parent / "PROMPT_EXAMPLES_REAL.md"
    with open(output_file, "w") as f:
        f.write("\n".join(output))

    print(f"✓ Generated REAL prompt examples: {output_file}")
    print(f"  - Uses actual database queries")
    print(f"  - Shows correct prompt ordering")
    print(f"  - Dynamic data at END of system prompts")


if __name__ == "__main__":
    asyncio.run(main())
